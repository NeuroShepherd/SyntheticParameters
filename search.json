[{"path":"https://neuroshepherd.github.io/ordinalsimr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 ordinalsimr authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://neuroshepherd.github.io/ordinalsimr/articles/coding-simulations.html","id":"coding-your-own-simulations","dir":"Articles","previous_headings":"","what":"Coding Your Own Simulations","title":"Coding Simulations","text":"guide provide rough overview code simulations using components package find Shiny application limiting purposes. Key information functions: run_simulations() take simulation input parameters return list. first element contains matrix p-values run simulation, second element multiple lists information describing group allocations detail. bind_rows() recommended reformatting two list elements mentioned . calculate_power_t2error() calculate_t1_error() can receive p-value data frames performing T1 Error, Power, T2 Error calculations confidence intervals. See function documentation additional arguments.","code":""},{"path":"https://neuroshepherd.github.io/ordinalsimr/articles/coding-simulations.html","id":"power-and-type-ii-error","dir":"Articles","previous_headings":"Coding Your Own Simulations","what":"Power and Type II Error","title":"Coding Simulations","text":"","code":"sim_results <- run_simulations(   sample_size = 80,   sample_prob = c(0.5, 0.5),   prob0 = c(0.1, 0.2, 0.3, 0.4),   prob1 = c(0.6, 0.2, 0.1, 0.1),   niter = 20 )  formatted_results <- bind_rows(sim_results) names(formatted_results) head(formatted_results$p_values)  formatted_results %>%   select(     Wilcoxon, Fisher, `Chi Squared\\n(No Correction)`,     `Chi Squared\\n(Correction)`, `Prop. Odds`,     `Coin Indep. Test`,     sample_size   ) %>%   calculate_power_t2error(alpha = 0.05, power_confidence_int = 95)"},{"path":"https://neuroshepherd.github.io/ordinalsimr/articles/coding-simulations.html","id":"type-i-error","dir":"Articles","previous_headings":"Coding Your Own Simulations","what":"Type I Error","title":"Coding Simulations","text":"find Type error distribution, code largely unchanged except fact probability vectors set run_simulations must now equivalent calculate_t1_error() function now applied.","code":"sim_results <- run_simulations(   sample_size = 30:35,   sample_prob = c(0.5, 0.5),   prob0 = c(.4, .3, .3),   prob1 = c(.8, .1, .1), # note the matching probabilities between groups   niter = 50 )  formatted_results <- bind_rows(sim_results) names(formatted_results) head(formatted_results$p_values)   formatted_results %>%   select(     Wilcoxon, Fisher, `Chi Squared\\n(No Correction)`,     `Chi Squared\\n(Correction)`, `Prop. Odds`,     `Coin Indep. Test`,     sample_size   ) %>%   calculate_t1_error(alpha = 0.05, t1_error_confidence_int = 95)"},{"path":"https://neuroshepherd.github.io/ordinalsimr/articles/coding-simulations.html","id":"mapping-over-many-sample-sizes","dir":"Articles","previous_headings":"Coding Your Own Simulations","what":"Mapping Over Many Sample Sizes","title":"Coding Simulations","text":"current version application can accept one sample size time. future iteration application ideally implement feature, , meantime, many situations advantageous model test results many different sample sizes. Depending big number iterations per sample sizes (niter) actual number sample sizes checked, may practical parallelized manner e.g. {furrr} {parallel}. case, example code included : Equivalent code purrr","code":"sample_sizes <- c(30, 50, 100)  lapply(sample_sizes, function(x) {   run_simulations(     sample_size = x,     sample_prob = c(0.5, 0.5),     prob0 = c(0.1, 0.2, 0.3, 0.4),     prob1 = c(0.6, 0.2, 0.1, 0.1),     niter = 100   ) %>%     bind_rows() %>%     select(       Wilcoxon, Fisher, `Chi Squared\\n(No Correction)`,       `Chi Squared\\n(Correction)`, `Prop. Odds`,       `Coin Indep. Test`, sample_size     ) %>%     calculate_power_t2error() }) sample_sizes %>%   purrr::map(     ~run_simulations(       sample_size = .x,       sample_prob = c(0.5, 0.5),       prob0 = c(0.1, 0.2, 0.3, 0.4),       prob1 = c(0.6, 0.2, 0.1, 0.1),       niter = 100       ) %>%       bind_rows() %>%       select(Wilcoxon, Fisher, `Chi Squared\\n(No Correction)`,             `Chi Squared\\n(Correction)`, `Prop. Odds`,             `Coin Indep. Test`, sample_size) %>%       calculate_power_t2error() )"},{"path":"https://neuroshepherd.github.io/ordinalsimr/articles/coding-simulations.html","id":"adjust-multiple-parameters","dir":"Articles","previous_headings":"Coding Your Own Simulations","what":"Adjust Multiple Parameters","title":"Coding Simulations","text":"perhaps likely analysts want iterate simulations variety different parameters . code provides structure creating combination grid based 5 input parameters can altered; example can easily altered include desired parameters replacing/removing/expanding listed parameters.","code":""},{"path":"https://neuroshepherd.github.io/ordinalsimr/articles/coding-simulations.html","id":"set-parameters","dir":"Articles","previous_headings":"Coding Your Own Simulations > Adjust Multiple Parameters","what":"Set Parameters","title":"Coding Simulations","text":"Note prob0_list prob1_list must always length corresponding sub-elements list must also length. Put terms application, must Group 2 Group 1, vector representing number possible outcomes must length 2 groups. performing simulations one distribution evaluate Type error, necessary form one probability list. object can recycled probabilities groups.","code":"# Choose sample sizes sample_size <- c(50, 100) # Set sample distributions as a proportion c(group1, group2) sample_prob <- list(c(0.5, 0.5), c(0.75, 0.25)) # Trial 1 has matching probabilities between the 2 groups. Trial 2 has non-matching probabilities prob0_list <- list(trial1_group1 = c(0.1, 0.2, 0.3, 0.4), trial2_group1 = c(0.1, 0.2, 0.3, 0.4)) prob1_list <- list(trial1_group2 = c(0.1, 0.2, 0.3, 0.4), trial2_group2 = c(0.2, 0.3, 0.3, 0.2)) # Number of iterations niter <- c(20, 100)"},{"path":"https://neuroshepherd.github.io/ordinalsimr/articles/coding-simulations.html","id":"create-simulation-grid","dir":"Articles","previous_headings":"Coding Your Own Simulations > Adjust Multiple Parameters","what":"Create Simulation Grid","title":"Coding Simulations","text":"Use tidyr::expand_grid() rather base:expand.grid() former creates tibble default, supports nested tibble structure ’m relying . (can, course, approached ways desired.)","code":"# Use tidyr::expand_grid as it creates a tibble, supporting the nested tibble structure info_table <- tidyr::expand_grid(   sample_size,   sample_prob,   prob0_list,   prob1_list,   niter )  info_table"},{"path":"https://neuroshepherd.github.io/ordinalsimr/articles/coding-simulations.html","id":"run-simulation","dir":"Articles","previous_headings":"Coding Your Own Simulations > Adjust Multiple Parameters","what":"Run Simulation","title":"Coding Simulations","text":"example complete running simulations calculating Power Type II error. However, code can applied either calculate Type error use p-values purposes. Equivalent Code {purrr} Note even relatively small sample sizes number iterations 1-3 magnitudes less normally specified simulation studies, processing 32 different simulations took ~20-30 seconds.","code":"# Calculate either Power/T2 error or T1 error depending on your specific needs many_sims <- mapply(   ordinalsimr::run_simulations,   sample_size = info_table$sample_size,   sample_prob = info_table$sample_prob,   prob0 = info_table$prob0_list,   prob1 = info_table$prob1_list,   niter = info_table$niter )   length(many_sims) many_sims[1] info_table %>%   purrr::pmap(     ~ run_simulations(       sample_size = ..1,       sample_prob = ..2,       prob0 = ..3,       prob1 = ..4,       niter = ..5     ) %>%       bind_rows() %>%       magrittr::extract2(\"p_values\") %>%       calculate_power_t2error(),     .progress = TRUE   )"},{"path":"https://neuroshepherd.github.io/ordinalsimr/articles/ordinalsimr.html","id":"shiny-app","dir":"Articles","previous_headings":"","what":"Shiny App","title":"Using {ordinalsimr}","text":"{ordinalsimr} package wraps Shiny application supporting functions running simulation studies several pre-selected statistical tests applicable ordinal data. Shiny app particularly suited calculating Power Type II error proposed 2-group comparison ordinal endpoint. Available parameters manipulate running tests include: Number simulations run (integer) sample size (integer) distribution ratio group 1 group 2 (ratio form X:X) Group 1 Group 2 distribution probabilities levels ordinal outcome addition parameters running simulation, following can adjusted Distributions page Filtering top x% observations view plot. remove alter data processes. included convenience function observing smaller windows data. Setting alpha significance level/p-value threshold Setting confidence intervals Power/T2 Error calculations Setting confidence intervals (separately) Type Error Group 1 Group 2 Bug reports feature requests can submitted issues https://github.com/NeuroShepherd/ordinalsimr/issues","code":""},{"path":"https://neuroshepherd.github.io/ordinalsimr/articles/ordinalsimr.html","id":"app-options","dir":"Articles","previous_headings":"Shiny App","what":"App Options","title":"Using {ordinalsimr}","text":"find consistently changing default parameters application new values manually, possible instead set default values parameters. available preset parameters prefixed ordinalsimr., functionality far implemented limited number defaults. Options can set using options() function. Example changing default number rows 6:","code":"options(ordinalsimr.default_entry_rows = 6)"},{"path":"https://neuroshepherd.github.io/ordinalsimr/articles/ordinalsimr.html","id":"available-options","dir":"Articles","previous_headings":"Shiny App > App Options","what":"Available Options","title":"Using {ordinalsimr}","text":"ordinalsimr.default_entry_rows: single integer indicating number rows Safety checks included option. Input must 2-column data frame. Column names discarded. Recommend ensure sum values column near 1 (e.g. using dplyr::near()).","code":""},{"path":"https://neuroshepherd.github.io/ordinalsimr/articles/ordinalsimr.html","id":"planned-options","dir":"Articles","previous_headings":"Shiny App > App Options","what":"Planned Options","title":"Using {ordinalsimr}","text":"ordinalsimr.default_sample_size: sample size ordinalsimr.default_simulations: number simulation iterations …","code":""},{"path":"https://neuroshepherd.github.io/ordinalsimr/articles/ordinalsimr.html","id":"using-downloaded-data","dir":"Articles","previous_headings":"Shiny App","what":"Using Downloaded Data","title":"Using {ordinalsimr}","text":"Data downloaded running simulation stored .rds file, can loaded R session using readRDS(). data structured named list 3 elements top level, several sub-elements. summary available information available code . comparison_data results comparing Group 1 Group 2 statistical tests (TII error power) group1_data results comparing Group 1 data (TI error group) group2_data results comparing Group 2 data (TI error group) p_values tables p-values tests (columns) simulation runs (rows) run_info tables detailed metainformation parameters used run distribution_statistics tables computed TII error, power, associated confidence intervals distribution_plot {ggplot2} plot distributions p-values group1_t1error group2_t1error tables TI error associated confidence intervals","code":"output <- readRDS(\"data-2024-02-16-049dcfcd9afdad1402588ca3a3f73f95-1.rds\") output$comparison_data$distribution_statistics str(output, max.level = 2)"},{"path":"https://neuroshepherd.github.io/ordinalsimr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Pat Callahan. Author, maintainer.","code":""},{"path":"https://neuroshepherd.github.io/ordinalsimr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Callahan P (2024). ordinalsimr: Ordinal Endpoint Comparisons. R package version 0.0.0.9000, https://neuroshepherd.github.io/ordinalsimr/, https://github.com/NeuroShepherd/ordinalsimr.","code":"@Manual{,   title = {ordinalsimr: Ordinal Endpoint Comparisons},   author = {Pat Callahan},   year = {2024},   note = {R package version 0.0.0.9000, https://neuroshepherd.github.io/ordinalsimr/},   url = {https://github.com/NeuroShepherd/ordinalsimr}, }"},{"path":"https://neuroshepherd.github.io/ordinalsimr/index.html","id":"ordinalsimr","dir":"","previous_headings":"","what":"Ordinal Endpoint Comparisons","title":"Ordinal Endpoint Comparisons","text":"{ordinalsimr} package assists constructing simulation studies ordinal data comparing two groups. intended facilitate translation methodological advances practical settings e.g. applied statisticians data analysts want determine appropriate statistical test apply data proposed distribution data. package primarily developed Shiny application abstracts away heavier coding aspect setting simulation studies. Instead, users can simply enter parameters data distributions application, save results .rds file. structure Shiny application allows one simulation specified time opposed grid parameters. However, underlying functions running simulations accessible. See vignette(\"ordinalsimr\") template code setting simulations manually.","code":""},{"path":"https://neuroshepherd.github.io/ordinalsimr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Ordinal Endpoint Comparisons","text":"can install development version ordinalsimr GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"NeuroShepherd/ordinalsimr\")"},{"path":"https://neuroshepherd.github.io/ordinalsimr/index.html","id":"recommendations","dir":"","previous_headings":"","what":"Recommendations","title":"Ordinal Endpoint Comparisons","text":"application available [link], may due account usage limitations ShinyApps.io. currently plan increase usage limits strongly recommended run application locally. Informative progressive bars implemented Shiny application, simulation fails run almost always fail beginning rather middle run. Simulations 1000s iterations take minutes hours run.","code":""},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/assign_groups.html","id":null,"dir":"Reference","previous_headings":"","what":"Randomly assign groups — assign_groups","title":"Randomly assign groups — assign_groups","text":"(Brief description function .)","code":""},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/assign_groups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Randomly assign groups — assign_groups","text":"","code":"assign_groups(   sample_size,   sample_prob,   prob0,   prob1,   seed,   .rng_kind = NULL,   .rng_normal_kind = NULL,   .rng_sample_kind = NULL )"},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/assign_groups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Randomly assign groups — assign_groups","text":"sample_size total number people observation. sample_prob vector probability weights obtaining elements vector sampled. prob0 vector probability possible outcome null group prob1 vector probability possible outcome intervention group seed integer specifying seed number .rng_kind seeding info passed withr::with_seed .rng_normal_kind seeding info passed withr::with_seed .rng_sample_kind seeding info passed withr::with_seed","code":""},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/assign_groups.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Randomly assign groups — assign_groups","text":"list group assignments","code":""},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/calculate_power_t2error.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Hypothesis Test Parameters — calculate_power_t2error","title":"Calculate Hypothesis Test Parameters — calculate_power_t2error","text":"function calculates power, Type II error, Type error tests given p-values. Power, Type II error, confidence intervals calculated using `stats::binom.test()` implements Newcombe method.","code":""},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/calculate_power_t2error.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Hypothesis Test Parameters — calculate_power_t2error","text":"","code":"calculate_power_t2error(   df,   alpha = 0.05,   power_confidence_int = 95,   n = NA_real_ )"},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/calculate_power_t2error.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Hypothesis Test Parameters — calculate_power_t2error","text":"df Data frame column vector p-values statistical test alpha Numeric significance level; defaults 0.05 power_confidence_int confidence interval n Numeric value sample size; repeated convenience","code":""},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/calculate_power_t2error.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Hypothesis Test Parameters — calculate_power_t2error","text":"data frame columns Type 1 error, Type 2 error, power well rows test","code":""},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/calculate_t1_error.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Type 1 Error — calculate_t1_error","title":"Calculate Type 1 Error — calculate_t1_error","text":"Calculate Type 1 error distribution, confidence interval around estimate. Type error confidence intervals calculated using `stats::binom.test()` implements Newcombe method.","code":""},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/calculate_t1_error.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Type 1 Error — calculate_t1_error","text":"","code":"calculate_t1_error(   df,   alpha = 0.05,   t1_error_confidence_int = 95,   n = NA_real_ )"},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/calculate_t1_error.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Type 1 Error — calculate_t1_error","text":"df data frame alpha significance level t1_error_confidence_int confidence interval n optional numeric input ","code":""},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/calculate_t1_error.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Type 1 Error — calculate_t1_error","text":"data frame","code":""},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/ordinal_tests.html","id":null,"dir":"Reference","previous_headings":"","what":"Ordinal outcome tests — ordinal_tests","title":"Ordinal outcome tests — ordinal_tests","text":"metafunction runs statistical tests listed , returns p-values named vector.","code":""},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/ordinal_tests.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ordinal outcome tests — ordinal_tests","text":"","code":"ordinal_tests(x, y, included = \"all\", ...)"},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/ordinal_tests.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ordinal outcome tests — ordinal_tests","text":"x Group one y Group two included character vector tests included. Default \"\" ... Placeholder additional arguments functions","code":""},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/ordinal_tests.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ordinal outcome tests — ordinal_tests","text":"named vector probabilities test function designed run 6 tests default. want run subset tests, can specify `included` argument. following values possible: \"Wilcoxon\" \"Fisher\" \"Chi Squared (Correction)\" \"Chi Squared (Correction)\" \"Prop. Odds\" \"Coin Indep. Test\" option primarily use Shiny application.","code":""},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/ordinal_tests.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Ordinal outcome tests — ordinal_tests","text":"stats::wilcox.test() stats::fisher.test() stats::chisq.test(correct = FALSE) stats::chisq.test(correct = TRUE) rms::lrm() coin::independence_test(ytrafo = coin::rank_trafo)","code":""},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/ordinalsimr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"ordinalsimr: Ordinal Endpoint Comparisons — ordinalsimr-package","title":"ordinalsimr: Ordinal Endpoint Comparisons — ordinalsimr-package","text":"Simultaneously evaluate multiple ordinal outcome measures.","code":""},{"path":[]},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/ordinalsimr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"ordinalsimr: Ordinal Endpoint Comparisons — ordinalsimr-package","text":"Maintainer: Pat Callahan patricktcallahan18@gmail.com (ORCID)","code":""},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/parse_ratio_text.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse Ratio Text — parse_ratio_text","title":"Parse Ratio Text — parse_ratio_text","text":"function parses text ratios written format 1-2 digit numbers separated colon trailing another 1-2 digit number. text processed numeric vector length 2 containing two numbers.","code":""},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/parse_ratio_text.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse Ratio Text — parse_ratio_text","text":"","code":"parse_ratio_text(text)"},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/parse_ratio_text.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse Ratio Text — parse_ratio_text","text":"text string form e.g. 5:95 70:30","code":""},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/parse_ratio_text.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse Ratio Text — parse_ratio_text","text":"Numeric vector length 2","code":""},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/parse_ratio_text.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse Ratio Text — parse_ratio_text","text":"","code":"parse_ratio_text(\"70:30\") #> [1] 0.7 0.3"},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling `rhs(lhs)`.","code":""},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/plot_distribution_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Distribution — plot_distribution_results","title":"Plot Distribution — plot_distribution_results","text":"function takes wide table p-values (.e. one column statistical test), converts long format, creates density plot p-values test.","code":""},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/plot_distribution_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Distribution — plot_distribution_results","text":"","code":"plot_distribution_results(df, alpha = 0.05, outlier_removal = 0.1)"},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/plot_distribution_results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Distribution — plot_distribution_results","text":"df data frame column set p-values different statistical test alpha numeric. significance level outlier_removal numeric. set x-axis scale maximum proportion","code":""},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/plot_distribution_results.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Distribution — plot_distribution_results","text":"ggplot object","code":""},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/plot_power.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Test Power — plot_power","title":"Plot Test Power — plot_power","text":"Plot Test Power","code":""},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/plot_power.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Test Power — plot_power","text":"","code":"plot_power(df, power_threshold = 0.8)"},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/plot_power.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Test Power — plot_power","text":"df dataframe p-values sample_size column power_threshold numeric. desired power threshold","code":""},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/plot_power.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Test Power — plot_power","text":"ggplot object","code":""},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/run_app.html","id":null,"dir":"Reference","previous_headings":"","what":"Run the Shiny Application — run_app","title":"Run the Shiny Application — run_app","text":"Run Shiny Application","code":""},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/run_app.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run the Shiny Application — run_app","text":"","code":"run_app(   onStart = NULL,   options = list(),   enableBookmarking = NULL,   uiPattern = \"/\",   ... )"},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/run_app.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run the Shiny Application — run_app","text":"onStart function called app actually run. needed shinyAppObj, since shinyAppDir case, global.R file can used purpose. options Named options passed runApp call (can following: \"port\", \"launch.browser\", \"host\", \"quiet\", \"display.mode\" \"test.mode\"). can also specify width height parameters provide hint embedding environment ideal height/width app. enableBookmarking Can one \"url\", \"server\", \"disable\". default value, NULL, respect setting previous calls  enableBookmarking(). See enableBookmarking() information bookmarking app. uiPattern regular expression applied GET request determine whether ui used handle request. Note entire request path must match regular expression order match considered successful. ... arguments pass golem_opts. See `?golem::get_golem_options` details.","code":""},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/run_simulations.html","id":null,"dir":"Reference","previous_headings":"","what":"Run Simulations — run_simulations","title":"Run Simulations — run_simulations","text":"Run Simulations","code":""},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/run_simulations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run Simulations — run_simulations","text":"","code":"run_simulations(   sample_size,   sample_prob,   prob0,   prob1,   niter,   included = \"all\",   .rng_kind = NULL,   .rng_normal_kind = NULL,   .rng_sample_kind = NULL )"},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/run_simulations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run Simulations — run_simulations","text":"sample_size Total number trial participants sample_prob vector probability weights obtaining elements vector sampled. prob0 Vector probabilities control group prob1 Vector probabilities intervention group niter Number simulation iterations complete#' included character vector tests included. Default \"\" .rng_kind seeding info passed withr::with_seed .rng_normal_kind seeding info passed withr::with_seed .rng_sample_kind seeding info passed withr::with_seed","code":""},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/run_simulations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run Simulations — run_simulations","text":"list lists; sub-list elements include `p_values` matrix p values tests iteration, `initial_groups` group assignment information iteration","code":""},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/run_simulations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run Simulations — run_simulations","text":"","code":"run_simulations(   sample_size = c(40, 50, 60),   sample_prob = c(0.5, 0.5),   prob0 = c(0.1, 0.2, 0.3, 0.4),   prob1 = c(0.6, 0.2, 0.1, 0.1),   niter = 100 ) #> $sample_size_40 #> # A tibble: 100 × 13 #>      Wilcoxon  Fisher Chi Squared\\n(No Cor…¹ Chi Squared\\n(Correc…² `Prop. Odds` #>         <dbl>   <dbl>                  <dbl>                  <dbl>        <dbl> #>  1 0.000695   3.07e-4              0.00134                0.00134   0.000310     #>  2 0.00250    6.91e-3              0.0107                 0.0107    0.00157      #>  3 0.000618   4.54e-3              0.00684                0.00684   0.000278     #>  4 0.00596    2.47e-2              0.0231                 0.0231    0.00355      #>  5 0.307      5.04e-1              0.512                  0.512     0.297        #>  6 0.0463     1.38e-1              0.136                  0.136     0.0364       #>  7 0.000486   2.05e-3              0.00540                0.00540   0.000229     #>  8 0.00724    3.11e-2              0.0315                 0.0315    0.00507      #>  9 0.00420    2.22e-2              0.0235                 0.0235    0.00261      #> 10 0.00000169 7.49e-7              0.0000144              0.0000144 0.0000000743 #> # ℹ 90 more rows #> # ℹ abbreviated names: ¹​`Chi Squared\\n(No Correction)`, #> #   ²​`Chi Squared\\n(Correction)` #> # ℹ 8 more variables: `Coin Indep. Test` <dbl>, run <int>, y <list>, x <list>, #> #   n_null <int>, n_intervene <dbl>, sample_size <dbl>, K <int> #>  #> $sample_size_50 #> # A tibble: 100 × 13 #>      Wilcoxon  Fisher Chi Squared\\n(No Cor…¹ Chi Squared\\n(Correc…² `Prop. Odds` #>         <dbl>   <dbl>                  <dbl>                  <dbl>        <dbl> #>  1    4.73e-6 2.27e-5             0.0000592              0.0000592       4.87e-7 #>  2    7.29e-6 1.31e-5             0.0000585              0.0000585       1.42e-6 #>  3    1.54e-3 4.67e-3             0.00734                0.00734         1.04e-3 #>  4    1.67e-3 3.20e-4             0.000481               0.000481        5.13e-4 #>  5    7.58e-3 4.24e-2             0.0501                 0.0501          5.95e-3 #>  6    2.09e-5 2.80e-5             0.000113               0.000113        3.03e-6 #>  7    4.61e-6 3.81e-6             0.0000425              0.0000425       7.76e-7 #>  8    2.69e-5 1.32e-4             0.000328               0.000328        6.86e-6 #>  9    2.78e-5 7.29e-5             0.000262               0.000262        8.94e-6 #> 10    1.46e-7 7.69e-8             0.00000138             0.00000138      4.25e-9 #> # ℹ 90 more rows #> # ℹ abbreviated names: ¹​`Chi Squared\\n(No Correction)`, #> #   ²​`Chi Squared\\n(Correction)` #> # ℹ 8 more variables: `Coin Indep. Test` <dbl>, run <int>, y <list>, x <list>, #> #   n_null <int>, n_intervene <dbl>, sample_size <dbl>, K <int> #>  #> $sample_size_60 #> # A tibble: 100 × 13 #>      Wilcoxon  Fisher Chi Squared\\n(No Cor…¹ Chi Squared\\n(Correc…² `Prop. Odds` #>         <dbl>   <dbl>                  <dbl>                  <dbl>        <dbl> #>  1    1.74e-5 1.02e-4            0.000238               0.000238    0.00000511   #>  2    1.37e-6 1.15e-7            0.00000118             0.00000118  0.000000256  #>  3    4.37e-5 1.97e-4            0.000474               0.000474    0.0000191    #>  4    6.83e-5 2.87e-4            0.000460               0.000460    0.0000232    #>  5    1.19e-4 5.54e-4            0.00109                0.00109     0.0000631    #>  6    1.10e-5 6.09e-5            0.000104               0.000104    0.00000243   #>  7    2.77e-7 1.57e-7            0.00000160             0.00000160  0.0000000174 #>  8    1.41e-5 1.17e-4            0.000214               0.000214    0.00000392   #>  9    2.09e-7 7.16e-8            0.000000823            0.000000823 0.0000000137 #> 10    5.22e-7 7.52e-7            0.00000421             0.00000421  0.0000000516 #> # ℹ 90 more rows #> # ℹ abbreviated names: ¹​`Chi Squared\\n(No Correction)`, #> #   ²​`Chi Squared\\n(Correction)` #> # ℹ 8 more variables: `Coin Indep. Test` <dbl>, run <int>, y <list>, x <list>, #> #   n_null <int>, n_intervene <dbl>, sample_size <dbl>, K <int> #>"},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/simulation_data_one_group.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulation Data for One Group — simulation_data_one_group","title":"Simulation Data for One Group — simulation_data_one_group","text":"Simulated p-values metadata two group comparison. Useful Type error calculations.","code":""},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/simulation_data_one_group.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulation Data for One Group — simulation_data_one_group","text":"","code":"simulation_data_one_group"},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/simulation_data_one_group.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Simulation Data for One Group — simulation_data_one_group","text":"## `simulation_data_one_group` list p_values data frame p-values run test initial_groups nested list information simulation run","code":""},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/simulation_data_two_groups.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulation Data for Two Groups — simulation_data_two_groups","title":"Simulation Data for Two Groups — simulation_data_two_groups","text":"Simulated p-values metadata two group comparison. Useful Type II error power calculations.","code":""},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/simulation_data_two_groups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulation Data for Two Groups — simulation_data_two_groups","text":"","code":"simulation_data_two_groups"},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/simulation_data_two_groups.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Simulation Data for Two Groups — simulation_data_two_groups","text":"## `simulation_data_two_groups` list p_values data frame p-values run test initial_groups nested list information simulation run","code":""},{"path":"https://neuroshepherd.github.io/ordinalsimr/news/index.html","id":"ordinalsimr-0009000","dir":"Changelog","previous_headings":"","what":"ordinalsimr 0.0.0.9000","title":"ordinalsimr 0.0.0.9000","text":"Added NEWS.md file track changes package.","code":""}]
